
var DEFAULT_PRECISION = 3;
var DEFAULT_STEP = 1;

function NumberInput (labelText, document, config, callback) {
    var elem = document.createElement ('input');
    if (config.disabled)
        elem.setAttribute ('disabled', 'true');
    elem.setAttribute ('type', 'number');
    this.precision = config.precision || DEFAULT_PRECISION;
    elem.setAttribute ('step', config.step || DEFAULT_STEP);
    if (Object.hasOwnProperty.call (config, 'min'))
        elem.setAttribute ('min', config.min);
    if (Object.hasOwnProperty.call (config, 'max'))
        elem.setAttribute ('max', config.max);

    // initial value
    if (config.value !== undefined)
        elem.value = config.value;

    // visual setup
    if (config.width)
        elem.style.width = config.width + 'px';

    // control events
    var self = this;
    elem.on ('input', function (event) {
        this.stepDown();
        this.stepUp();
        self.value = Number (elem.value);
        callback (self.value);
    });

    // trap all keypresses when focused
    elem.on ('keydown', function (event) {
        event.stopPropagation();
        return true;
    });

    // wrap the input in a label and return
    var label = document.createElement ('label');
    label.appendChild (document.createTextNode (labelText));
    label.appendChild (elem);
    this.elem = label;

}

NumberInput.prototype.set = function (value, step) {
    var factor = Math.pow (10, this.precision);
    value = Math.floor (value * factor) / factor;
    var input = this.elem.firstElementChild;
    input.value = value;
    if (step !== undefined)
        input.setAttribute ('step', step);
};

NumberInput.prototype.enable = function (isEnabled) {
    if (isEnabled)
        this.elem.firstElementChild.removeAttribute ('disabled');
    else
        this.elem.firstElementChild.setAttribute ('disabled', String (!isEnabled));
};

module.exports = NumberInput;
